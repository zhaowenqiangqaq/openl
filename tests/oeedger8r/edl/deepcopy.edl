// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

enclave {
  include "stdint.h"

  struct ShallowStruct {
    uint64_t count;
    size_t size;
    uint64_t* ptr;
  };

  struct CountStruct {
    uint64_t count;
    size_t size;
    [count=3] uint64_t* ptr;
  };

  struct CountParamStruct {
    uint64_t count;
    size_t size;
    [count=count] uint64_t* ptr;
  };

  struct SizeStruct {
    uint64_t count;
    size_t size;
    [size=16] uint64_t* ptr;
  };

  struct CountSizeStruct {
    uint64_t count;
    size_t size;
    [count=2, size=12] uint64_t* ptr;
  };

  struct SizeParamStruct {
    uint64_t count;
    size_t size;
    [size=size] uint64_t* ptr;
  };

  struct CountSizeParamStruct {
    uint64_t count;
    size_t size;
    [count=count, size=size] uint64_t* ptr;
  };

  struct NestedStruct {
    int plain_int;
    [count=4] int* array_of_int;
    ShallowStruct* shallow_struct;
    [count=3] CountStruct* array_of_struct;
  };

  struct SuperNestedStruct {
    // TODO: We should eventually support count being a member of the struct.
    [count=2] NestedStruct* more_structs;
  };

  struct CountParamNestedStruct
  {
    size_t num;
    [count=num] CountParamStruct* array_of_struct;
  };

  struct MultipleNestedStruct
  {
    size_t num_1;
    [count=num_1] CountParamStruct* array_of_struct_1;
    size_t num_2;
    [count=num_2] SizeParamStruct* array_of_struct_2;
    size_t num_3;
    [count=num_3] CountSizeParamStruct* array_of_struct_3;
    size_t num_4;
    [count=num_4] CountParamNestedStruct* array_of_struct_4;
  };

  struct IOVEC
  {
    [size=len] void *base;
    size_t len;
  };

  trusted {
    // Since `s` is passed by value, `s.ptr` is not deep copied.
    public void deepcopy_value(ShallowStruct s, [user_check] uint64_t* ptr);

    // Although `s` is passed by pointer, because `s.ptr` does not
    // have any attribute, it is still not deep copied.
    public void deepcopy_shallow([in, out, count=1] ShallowStruct* s, [user_check] uint64_t* ptr);

    // Deep copy of one `CountStruct` with an embedded array should
    // take place.
    public void deepcopy_count([in, out, count=1] CountStruct* s);

    // Deep copy of one `CountParamStruct` with an embedded array
    // should take place.
    public void deepcopy_countparam([in, out, count=1] CountParamStruct* s);

    // TODO: We should have a `SizeStruct` to test deep copying where
    // the size attribute is correctly used with a hard-coded value.
    public void deepcopy_size([in, out, count=1] SizeStruct* s);
    public void deepcopy_countsize([in, out, count=1] CountSizeStruct* s);

    // Deep copy of one `SizeParamStruct` with an embedded array
    // should take place.
    public void deepcopy_sizeparam([in, out, count=1] SizeParamStruct* s);

    // Deep copy of one `CountSizeParamStruct` with an embedded array
    // should take place.
    public void deepcopy_countsizeparam([in, out, count=1] CountSizeParamStruct* s);

    // Deep copy of one `CountSizeParamStruct` with an embedded array
    // should take place, tests with `size * 1`.
    public void deepcopy_countsizeparam_size([in, out, count=1] CountSizeParamStruct* s);

    // Deep copy of one `CountSizeParamStruct` with an embedded array
    // should take place, tests with `count * 1`.
    public void deepcopy_countsizeparam_count([in, out, count=1] CountSizeParamStruct* s);

    // Deep copy of two `CountParamStruct`s each with an embedded
    // array and different counts should take place.
    public void deepcopy_countparamarray([in, out, count=2] CountParamStruct* s);

    // Deep copy of two `SizeParamStruct`s each with an embedded
    // array and different sizes should take place.
    public void deepcopy_sizeparamarray([in, out, count=2] SizeParamStruct* s);

    // Deep copy of two `CountSizeParamStruct`s each with an embedded
    // array and different counts should take place.
    public void deepcopy_countsizeparamarray([in, out, count=2] CountSizeParamStruct* s);

    // Maybe test for recursive copying.
    public void deepcopy_nested([in, out, count=1] NestedStruct* n);

    // Really stress the recursion.
    public void deepcopy_super_nested([in, out, count=n] SuperNestedStruct* s, size_t n);

    // Test handling of null values.
    public void deepcopy_null([in, out, count=1] CountStruct* s);

    // Test that it is only copied in, not out.
    public void deepcopy_in([in, count=1] CountStruct* s);

    // Deep copy of one `CountStruct` with an embedded array in and out
    // should take place.
    public void deepcopy_inout_count([in, out, count=1] CountStruct* s);

    // Test a real-world scenario.
    public void deepcopy_iovec([in, out, count=n] IOVEC* iov, size_t n);

    // Expect the callee to set a large count value on return.
    public void deepcopy_countparam_return_large([in, out, count=1] CountParamStruct* s);

    // Expect the callee to set a large size value on return.
    public void deepcopy_sizeparam_return_large([in, out, count=1] SizeParamStruct* s);

    // Expect the callee to set a large size and count value on return.
    public void deepcopy_countsizeparam_return_large([in, out, count=1] CountSizeParamStruct* s);

    // Expect the callee to set a large size and count value on return.
    public void deepcopy_countsize_return_large([in, out, count=1] CountSizeStruct* s);

    public void test_deepcopy_ocalls();

    public void deepcopy_countparam_out([out, count=1] CountParamStruct* s) transition_using_threads;
    public void deepcopy_countparamarray_out([out, count=2] CountParamStruct* s) transition_using_threads;
    public void deepcopy_countparamarray_n_out([out, count=n] CountParamStruct* s, size_t n);
    public void deepcopy_countparamarray_partial_out([out, count=2] CountParamStruct* s) transition_using_threads;
    public void deepcopy_sizeparam_out([out, count=1] SizeParamStruct* s) transition_using_threads;
    public void deepcopy_countsizeparam_out([out, count=1] CountSizeParamStruct* s) transition_using_threads;
    public void deepcopy_countsize_out([out, count=1] CountSizeStruct* s) transition_using_threads;
    public void deepcopy_nested_out([out, count=1] NestedStruct* n) transition_using_threads;
    public void deepcopy_nested_countparam_out([out, count=1] CountParamNestedStruct* n) transition_using_threads;
    public void deepcopy_multiple_nested_out([out, count=1] MultipleNestedStruct* n) transition_using_threads;
    public void deepcopy_multiple_nested_partial_out([out, count=1] MultipleNestedStruct* n) transition_using_threads;
    public void deepcopy_mix([in, count=1] SizeParamStruct* s_in,
                             [in, out, count=1] SizeParamStruct* s_inout,
                             [out, count=1] SizeParamStruct* s_out,
                             [user_check] SizeParamStruct* s_user_check,
                             [out, count=1] SizeParamStruct* s_out_2) transition_using_threads;

    public void deepcopy_nested_countparam_inout([in, out] CountParamNestedStruct* s);
    public void deepcopy_nested_countparam_in([in] CountParamNestedStruct* s);
  };

  untrusted
  {
    // Deep copy of one `CountParamStruct` with an embedded array
    // should take place.
    void ocall_deepcopy_countparam([in, out, count=1] CountParamStruct* s);

    // Deep copy of one `SizeParamStruct` with an embedded array
    // should take place.
    void ocall_deepcopy_sizeparam([in, out, count=1] SizeParamStruct* s);

    // Deep copy of two `CountSizeParamStruct`s each with an embedded
    // array and different counts should take place.
    void ocall_deepcopy_countsizeparam([in, out, count=1] CountSizeParamStruct* s);

    // Deep copy of one `CountSizeStruct` with an embedded
    // array should take place.
    void ocall_deepcopy_countsize([in, out, count=1] CountSizeStruct* s);

    // Expect the callee to set a large count value on return.
    void ocall_deepcopy_countparam_return_large([in, out, count=1] CountParamStruct* s);

    // Expect the callee to set a large count value on return.
    void ocall_deepcopy_sizeparam_return_large([in, out, count=1] SizeParamStruct* s);

    // Expect the callee to set a large count value on return.
    void ocall_deepcopy_countsizeparam_return_large([in, out, count=1] CountSizeParamStruct* s);

    // Expect the callee to set a large count value on return.
    void ocall_deepcopy_countsize_return_large([in, out, count=1] CountSizeStruct* s);

    void ocall_deepcopy_countparam_out([out, count=1] CountParamStruct* s) transition_using_threads;
    void ocall_deepcopy_countparamarray_out([out, count=2] CountParamStruct* s) transition_using_threads;
    void ocall_deepcopy_countparamarray_n_out([out, count=n] CountParamStruct* s, size_t n);
    void ocall_deepcopy_countparamarray_partial_out([out, count=2] CountParamStruct* s) transition_using_threads;
    void ocall_deepcopy_sizeparam_out([out, count=1] SizeParamStruct* s) transition_using_threads;
    void ocall_deepcopy_countsizeparam_out([out, count=1] CountSizeParamStruct* s) transition_using_threads;
    void ocall_deepcopy_countsize_out([out, count=1] CountSizeStruct* s) transition_using_threads;
    void ocall_deepcopy_nested_out([out, count=1] NestedStruct* n) transition_using_threads;
    void ocall_deepcopy_nested_countparam_out([out, count=1] CountParamNestedStruct* n) transition_using_threads;
    void ocall_deepcopy_multiple_nested_out([out, count=1] MultipleNestedStruct* n) transition_using_threads;
    void ocall_deepcopy_multiple_nested_partial_out([out, count=1] MultipleNestedStruct* n) transition_using_threads;
    void ocall_deepcopy_mix([in, count=1] SizeParamStruct* s_in,
                            [in, out, count=1] SizeParamStruct* s_inout,
                            [out, count=1] SizeParamStruct* s_out,
                            [user_check] SizeParamStruct* s_user_check,
                            [out, count=1] SizeParamStruct* s_out_2) transition_using_threads;

    void ocall_deepcopy_nested_countparam_inout([in, out] CountParamNestedStruct* s);
    void ocall_deepcopy_nested_countparam_in([in] CountParamNestedStruct* s);
  };
};
