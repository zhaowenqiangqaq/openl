# Copyright (c) Open Enclave SDK contributors.
# Licensed under the MIT License.

---
- name: Gather Ansible facts
  ansible.builtin.gather_facts:
  become: false

- name: Include distribution release specific vars
  ansible.builtin.include_vars:
    file: "{{ ansible_distribution | lower }}/{{ ansible_distribution_release | lower }}.yml"
    
- name: Populate service facts
  ansible.builtin.service_facts:

- name: Include distribution vars
  ansible.builtin.include_vars:
    file: "{{ ansible_distribution | lower }}/main.yml"

- name: Check default driver files
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ intel_dcap_driver_files }}"
  ignore_errors: yes
  register: intel_sgx_driver

- name: Trigger driver installation based on file existence
  ansible.builtin.set_fact:
    intel_sgx_driver_exists: yes
  loop: "{{ intel_sgx_driver.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stat.exists

- name: install driver
  block:

  - name: Install the SGX driver requirements
    ansible.builtin.include_tasks: "{{ ansible_distribution | lower }}/sgx-driver-requirements.yml"

  - name: Ensure aesmd service stopped
    ansible.builtin.service:
      name: aesmd
      state: stopped
    when: "'aesmd.service' in ansible_facts.services"

  - name: Download Intel SGX DCAP Driver
    ansible.builtin.get_url:
      url: "{{ intel_sgx_w_flc_driver_url }}"
      dest: /tmp/sgx_linux_x64_driver.bin
      mode: 0755
      timeout: 120
    retries: 3
    when: flc_enabled|bool

  - name: Download Intel SGX1 Driver
    ansible.builtin.get_url:
      url: "{{ intel_sgx1_driver_url }}"
      dest: /tmp/sgx_linux_x64_driver.bin
      mode: 0755
      timeout: 120
    retries: 3
    when: not flc_enabled|bool

  - name: Install the Intel SGX Driver
    ansible.builtin.command: /tmp/sgx_linux_x64_driver.bin

  - name: Remove the Intel SGX driver installer
    ansible.builtin.file:
      path: /tmp/sgx_linux_x64_driver.bin
      state: absent

  - name: Set out-of-proc attestation by default
    ansible.builtin.lineinfile:
      path: /etc/environment
      state: present
      line: SGX_AESM_ADDR=1

  when: intel_sgx_driver_exists is undefined or
        not intel_sgx_driver_exists

- name: Add user to sgx_prv group
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    group: sgx_prv
  when:
    - intel_sgx_prv_permissions is defined
    - intel_sgx_prv_permissions | bool
    
- name: Print sgx_prv user
  ansible.builtin.debug:
    msg: "Added {{ ansible_user_id }} to sgx_prv group"
  when:
    - intel_sgx_prv_permissions is defined
    - intel_sgx_prv_permissions | bool

- name: Ensure aesmd service running
  ansible.builtin.service:
    name: aesmd
    state: started
    enabled: yes
  when: "'aesmd.service' in ansible_facts.services"
