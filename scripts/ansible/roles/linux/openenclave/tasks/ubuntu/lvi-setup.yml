# Copyright (c) Open Enclave SDK contributors.
# Licensed under the MIT License.
#

---
- name: Set clang and lvi facts
  ansible.builtin.set_fact:
    clang_previous_version: "10"
    clang_current_version: "11"
    local_lvi_directory: '/usr/local/lvi-mitigation'
    scripts_lvi_directory: '{{ playbook_dir }}/../lvi-mitigation'

- name: Detect currently installed glibc version
  ansible.builtin.shell: "ldd --version | awk '/ldd/{print $NF}'"
  changed_when: false
  register: glibc_version

- name: Detect installed clang (previous version)
  ansible.builtin.shell: "which clang-{{ clang_previous_version }}"
  changed_when: false
  register: previous_clang
  ignore_errors: yes

- name: Detect currently installed clang++ (previous version)
  ansible.builtin.shell: "which clang++-{{ clang_previous_version }}"
  changed_when: false
  register: previous_clangcpp
  ignore_errors: yes

- name: Detect installed clang (current version)
  ansible.builtin.shell: "which clang-{{ clang_current_version }}"
  changed_when: false
  register: current_clang
  ignore_errors: yes

- name: Detect installed clang++ (current version)
  ansible.builtin.shell: "which clang++-{{ clang_current_version }}"
  changed_when: false
  register: current_clangcpp
  ignore_errors: yes

- name: Detect currently installed gcc
  ansible.builtin.shell: "which gcc"
  changed_when: false
  register: gcc

- name: Detect currently installed gcpp
  ansible.builtin.shell: "which g++"
  changed_when: false
  register: gcpp

- name: Creates directories
  ansible.builtin.file:
    path: '{{ local_lvi_directory }}/bin'
    state: directory

- name: Download as/ld tarball
  ansible.builtin.get_url:
    url: 'https://download.01.org/intel-sgx/sgx-linux/2.13/as.ld.objdump.gold.r3.tar.gz'
    dest: '/tmp/'
  register: asldobjdump

- name: Extract as and ld binaries
  ansible.builtin.unarchive:
    src: "{{ asldobjdump.dest }}"
    dest: '{{ local_lvi_directory }}/'
    remote_src: yes
  when: asldobjdump.changed

- name: Clean up as/ld tarball
  ansible.builtin.file:
    path: "{{ asldobjdump.dest }}"
    state: absent
  when: asldobjdump.changed

- name: Create symbolic link to as
  ansible.builtin.file:
    src: '{{ local_lvi_directory }}/external/toolset/ubuntu{{ ansible_distribution_version }}/as'
    dest: '{{ local_lvi_directory }}/bin/as'
    state: link
    force: yes

- name: Create symbolic link to ld
  ansible.builtin.file:
    src: '{{ local_lvi_directory }}/external/toolset/ubuntu{{ ansible_distribution_version }}/ld'
    dest: '{{ local_lvi_directory }}/bin/ld'
    state: link
    force: yes
  when: glibc_version.stdout >= '2.27'

- name: Copy scripts
  ansible.builtin.copy:
    src: '{{ scripts_lvi_directory }}/'
    dest: '{{ local_lvi_directory }}/bin'
    mode: 'u=rx,g=rx,o=rx'

- name: Create clang wrapper (previous version)
  ansible.builtin.shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=clang-{{ clang_previous_version }} --path={{ local_lvi_directory }}/bin"
  when: previous_clang.stdout | length > 0

- name: Create clang++ wrapper (previous version)
  ansible.builtin.shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=clang++-{{ clang_previous_version }} --path={{ local_lvi_directory }}/bin"
  when: previous_clangcpp.stdout | length > 0

- name: Create clang wrapper (current version)
  ansible.builtin.shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=clang-{{ clang_current_version }} --path={{ local_lvi_directory }}/bin"
  when: current_clang.stdout | length > 0

- name: Create clang++ wrapper (current version)
  ansible.builtin.shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=clang++-{{ clang_current_version }} --path={{ local_lvi_directory }}/bin"
  when: current_clangcpp.stdout | length > 0

- name: Create symbolic links to clang (previous version)
  ansible.builtin.file:
    src: '{{ item.path }}'
    dest: '{{ local_lvi_directory }}/bin/{{ item.dest }}'
    state: link
    force: yes
  with_items:
    - { path: '{{ previous_clang.stdout }}', dest: 'clang-{{ clang_previous_version }}_symlink' }
    - { path: '{{ previous_clangcpp.stdout }}', dest: 'clang++-{{ clang_previous_version }}_symlink'}
  when: previous_clang.stdout | length > 0 and previous_clangcpp.stdout | length > 0

- name: Create symbolic links to clang (current version)
  ansible.builtin.file:
    src: '{{ item.path }}'
    dest: '{{ local_lvi_directory }}/bin/{{ item.dest }}'
    state: link
    force: yes
  with_items:
    - { path: '{{ current_clang.stdout }}', dest: 'clang-{{ clang_current_version }}_symlink' }
    - { path: '{{ current_clangcpp.stdout }}', dest: 'clang++-{{ clang_current_version }}_symlink'}
  when: current_clang.stdout  | length > 0 and current_clangcpp.stdout | length > 0

- name: Create gcc wrapper
  ansible.builtin.shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=gcc --path={{ local_lvi_directory }}/bin"
  when: gcc.stdout | length > 0

- name: Create g++ wrapper
  ansible.builtin.shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=g++ --path={{ local_lvi_directory }}/bin"
  when: gcpp.stdout | length > 0

- name: Create symbolic links to gcc
  ansible.builtin.file:
    src: '{{ item.path }}'
    dest: '{{ local_lvi_directory }}/bin/{{ item.dest }}'
    state: link
    force: yes
  with_items:
    - { path: '{{ gcc.stdout }}', dest: 'gcc_symlink' }
    - { path: '{{ gcpp.stdout }}', dest: 'g++_symlink' }
  when: gcc.stdout | length > 0 and gcpp.stdout | length > 0
