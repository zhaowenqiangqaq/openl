// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

/*
This Pipeline will publish an OpenEnclave release from GitHub to public APT and NuGet repositories.
To publish a release:
1) PUBLISH_RELEASE should be set to true and 
2) OE_RELEASE_VERSION should be set to the release version you want to publish.

If PUBLISH_RELEASE is not set, the job will do a dry run.
*/

library "OpenEnclaveJenkinsLibrary@${params.OECI_LIB_VERSION}"


/**
 * Publish OpenEnclave Ubuntu packages to the Microsoft APT repository
 *
 * @param release_version  The version of the Open Enclave release to install
 * @param os_release       The distribution version without "." (e.g. 2004)
 */

def ubuntuPublishRelease(String release_version, String os_release) {

    helpers.WaitForAptLock()
    withCredentials([file(credentialsId: 'azure-repoapi-client', variable: 'repoapiclient'),
                     string(credentialsId: 'msft-apt-repo-pem', variable: 'repoclientpem'),
                     string(credentialsId: 'ReleaseAADClientId', variable: 'AADClientId'),
                     string(credentialsId: 'ReleaseAADResource', variable: 'AADResource'),
                     string(credentialsId: 'ReleaseAADTenant', variable: 'AADTenant'),
                     string(credentialsId: "MicrosoftAptRepositoryUbuntu${os_release}", variable: "UbuntuRepoID")]) {
        withEnv(["OS_RELEASE=${os_release}"]) {
            sh '''#!/bin/bash
                set +x
                echo Ubuntu${OS_RELEASE}
                sudo apt-get update
                sudo apt-get -y --no-install-recommends install python3-adal jq

                if ! apt list --installed | grep azure-repoapi-client; then
                    sudo apt -y install ${repoapiclient}
                fi

                # Install repoclient.pem
                if [[ -f ${WORKSPACE}/repoclient.pem ]]; then
                    rm ${WORKSPACE}/repoclient.pem
                fi
                touch ${WORKSPACE}/repoclient.pem
                chmod 600 ${WORKSPACE}/repoclient.pem
                echo ${repoclientpem} | awk 'NF {gsub(/- /, "-\\n"); gsub(/ -/, "\\n-"); printf \$0;}' &>> ${WORKSPACE}/repoclient.pem

                # Install repoclient configuration
                if [[ -f ${WORKSPACE}/config-Ubuntu${OS_RELEASE}.json ]]; then
                    echo "Old config-Ubuntu${OS_RELEASE}.json detected. Removing..."
                    rm ${WORKSPACE}/config-Ubuntu${OS_RELEASE}.json
                fi
                touch ${WORKSPACE}/config-Ubuntu${OS_RELEASE}.json
                chmod 600 ${WORKSPACE}/config-Ubuntu${OS_RELEASE}.json
                jq '.' <<EOF >>${WORKSPACE}/config-Ubuntu${OS_RELEASE}.json
{
    "server": "azure-apt-cat.cloudapp.net",
    "port": "443",
    "AADClientId": "${AADClientId}",
    "AADClientCertificate": "${WORKSPACE}/repoclient.pem",
    "AADResource": "${AADResource}",
    "AADTenant": "${AADTenant}",
    "AADAuthorityUrl": "https://login.microsoftonline.com",
    "repositoryId": "${UbuntuRepoID}"
}
EOF

                # Test repoclient
                repoclient -c ${WORKSPACE}/config-Ubuntu${OS_RELEASE}.json repo list
            '''
        }
        script {
            // Download and publish open-enclave and open-enclave-hostverify packages if PUBLISH_RELEASE is true
            def os_id = 'Ubuntu'
            if (params.PUBLISH_RELEASE) {
                helpers.releaseDownloadLinux(release_version, "open-enclave", 'GitHub', os_id, os_release)
                helpers.releaseDownloadLinux(release_version, "open-enclave-hostverify", 'GitHub', os_id, os_release)
                sh """#!/bin/bash
                    echo "Publishing OpenEnclave ${release_version}"
                    repoclient -c ${WORKSPACE}/config-Ubuntu${os_release}.json package add "${WORKSPACE}/${release_version}/${os_id}_${os_release}/${os_id}_${os_release}_open-enclave_${release_version}_amd64.deb"
                    repoclient -c ${WORKSPACE}/config-Ubuntu${os_release}.json package add "${WORKSPACE}/${release_version}/${os_id}_${os_release}/${os_id}_${os_release}_open-enclave-hostverify_${release_version}_amd64.deb"
                """
            }
        }
        cleanWs()
    }
}

pipeline {
    agent any
    options {
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(
            logRotator(
                artifactNumToKeepStr: '3',
                numToKeepStr: '3'
            )
        )
    }
    parameters {
        string(name: 'REPOSITORY', defaultValue: 'openenclave', description: 'GitHub repository owner name', trim: true)
        string(name: 'BRANCH', defaultValue: 'master', description: 'GitHub repository branch to checkout', trim: true)
        booleanParam(name: "PUBLISH_RELEASE", defaultValue: false, description: 'Publish to public repositories?')
        string(name: "OE_RELEASE_VERSION", defaultValue: '', description: 'Open Enclave Release Version', trim: true)
        string(name: "OECI_LIB_VERSION", defaultValue: 'master', description: 'Version of OE Libraries to use', trim: true)
    }
    stages {
        stage('Publish Ubuntu 20.04') { steps { node('nonsgx-ubuntu-2004') { ubuntuPublishRelease(params.OE_RELEASE_VERSION, '2004') } }}
        // Todo: Add NuGet stage and function
    }
    post {
        always {
            cleanWs()
        }
    }
}
