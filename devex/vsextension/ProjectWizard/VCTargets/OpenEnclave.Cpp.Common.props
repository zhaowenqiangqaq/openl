<!-- Copyright (c) Open Enclave SDK contributors.
     Licensed under the MIT License.
  -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- The general order of executing an MSBuild file is roughly:
       1) vcxproj file
       2) Import Microsoft.Cpp.props
       3) Import Toolset specific props (e.g. $(VCTargets)Platforms\Win32\PlatformToolsets\openenclave\Toolset.props)
       4) Import This File (OpenEnclave.Cpp.Common.props)
       5) Core logic of vcxproj (define files, override properties, etc)
       6) Import Microsoft.Cpp.targets
       7) Import Toolset specific targets file (e.g. $(VCTargets)Platforms\Win32\PlatformToolsets\openenclave\Toolset.targets)
       8) Run the compiler.
       The important thing is that we have hooks at 3, 4, and 7.  3 and 4 give
       us the ability to provide initial values for toolchain settings (where
       is the compiler, what values are considered "default" for a given
       setting, etc), 7 gives us the ability to act on anything that the user
       has overridden (such as warning or erroring on incompatible settings,
       mapping settings to other settings, etc).
       -->

  <PropertyGroup>
    <!-- This initializes the values in Properties > General > Output Directory.
       Builds will fail without this. -->
    <OutDirWasSpecified Condition=" '$(OutDir)'!='' AND '$(OutDirWasSpecified)'=='' ">true</OutDirWasSpecified>
    <OutDirWasSpecified Condition=" '$(OutDir)'=='' AND '$(OutDirWasSpecified)'=='' ">false</OutDirWasSpecified>

    <IntDir Condition="'$(IntDir)'=='' AND '$(IntermediateOutputPath)'!=''">$(IntermediateOutputPath)</IntDir>
    <IntDir Condition="'$(IntDir)'=='' AND '$(IntermediateOutputPath)'==''">$(Configuration)\</IntDir>
    <OutDir Condition="'$(OutDir)'=='' AND '$(SolutionDir)' != ''">$(SolutionDir)$(Configuration)\</OutDir>
    <OutDir Condition="'$(OutDir)'=='' AND '$(SolutionDir)' == ''">$(IntDir)</OutDir>
    <DebuggerFlavor Condition="'$(DebuggerFlavor)'==''">WindowsLocalDebugger</DebuggerFlavor>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Short names for platform toolsets (added to project name in Solution Explorer) -->
    <_PlatformToolsetShortNameFor_openenclave>Open Enclave</_PlatformToolsetShortNameFor_openenclave>
    <_PlatformToolsetFriendlyNameFor_openenclave>Open Enclave</_PlatformToolsetFriendlyNameFor_openenclave>
  </PropertyGroup>

  <!-- Open Enclave settings -->
  <PropertyGroup>
    <ClangToolExe>clang.exe</ClangToolExe>
    <ClangVersion>8.0.1</ClangVersion>
    <ClangTarget>x86_64-pc-linux</ClangTarget>
    <GNUMode>true</GNUMode>
    <ToolchainFriendlyName>Clang</ToolchainFriendlyName>
    <ExecutablePath Condition="'$(ExecutablePath)' == ''">$(LLVMToolchainPrebuiltRoot)\bin;$(ToolchainPrebuiltPath)\bin;$(MSBuild_ExecutablePath);$(PATH);</ExecutablePath>
    <IncludePath Condition="'$(IncludePath)' == ''">$(LLVMToolchainPrebuiltRoot)\lib64\clang\$(LLVMVersion)\include;</IncludePath>
    <ExcludePath Condition="'$(ExcludePath)' == ''">$(LLVMToolchainPrebuiltRoot)\lib64\clang\$(LLVMVersion)\include;$(LLVMToolchainPrebuiltRoot)\bin;$(ToolchainPrebuiltPath)\bin;$(MSBuildToolsPath);$(MSBuildFrameworkToolsPath);$(MSBuild_ExecutablePath);$(SystemRoot)</ExcludePath>
  </PropertyGroup>

  <!-- Find an installed LLVM and set up our paths. -->
  <PropertyGroup>
    <LLVMInstallDir>$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\LLVM\LLVM)</LLVMInstallDir>
    <LLVMInstallDir Condition="'$(LLVMInstallDir)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\LLVM\LLVM)</LLVMInstallDir>
    <LLVMInstallDir Condition="'$(LLVMInstallDir)' != ''">$(LLVMInstallDir)\</LLVMInstallDir>
    <ClangExecutable>$(LLVMInstallDir)bin\clang.exe</ClangExecutable>
    <LldLinkExecutable>$(LLVMInstallDir)bin\lld-link.exe</LldLinkExecutable>
    <LlvmLibExecutable>$(LLVMInstallDir)bin\llvm-lib.exe</LlvmLibExecutable>
    <LlvmArExecutable>$(LLVMInstallDir)bin\llvm-ar.exe</LlvmArExecutable>
    <UseClang>true</UseClang>
    <UseLldLink>true</UseLldLink>
    <UseLlvmLib>true</UseLlvmLib>
  </PropertyGroup>

  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.WindowsSDK.props" Condition="Exists('$(VCTargetsPath)\Microsoft.Cpp.WindowsSDK.props')"/>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Common.props" />

  <PropertyGroup Condition="'$(ConfigurationType)' == 'StaticLibrary'">
    <LibCompiled>true</LibCompiled>
    <TargetExt>.a</TargetExt>
    <TargetExtDebug>.a</TargetExtDebug>
    <OutputType>staticlibrary</OutputType>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Set some paths (such as include paths) that are common to all platforms.  This is the same as what
         the default paths for cl will use.
         -->
    <IncludePath Condition="'$(IncludePath)' == ''">$(IncludePath);$(VC_IncludePath);$(WindowsSDK_IncludePath);</IncludePath>
    <LibraryWPath Condition="'$(LibraryWPath)' == ''">$(WindowsSDK_MetadataPath);</LibraryWPath>
    <SourcePath Condition="'$(SourcePath)' == ''">$(VC_SourcePath);</SourcePath>
  </PropertyGroup>


  <!-- Set values which are reflected in the property UI by default.  The user can override these
       by editing the vcxproj file (or making changes via the UI, which has the same effect).
       -->
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderOutputFileDirectory>$(IntDir)</PrecompiledHeaderOutputFileDirectory>
      <ExceptionHandling>Enabled</ExceptionHandling>
      <DebugInformationFormat/>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup>
    <Link>
      <AdditionalDependencies />
    </Link>
  </ItemDefinitionGroup>
</Project>
