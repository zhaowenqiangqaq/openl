// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#ifndef _OE_TRACEE_H
#define _OE_TRACEE_H

#include <openenclave/bits/defs.h>
#include <openenclave/enclave.h>
#include <openenclave/log.h>

OE_EXTERNC_BEGIN

/**
 * User-defined callback for processing logs generated by the enclave.
 *
 * The callback, defined as expected, will be called every time OE_TRACE is
 * is called by enclave routines, irrespective of log level. The callback
 * will be processed under the log lock.
 *
 * NOTE: The function oe_enclave_log_set_callback sets the callback and only
 * then will enclave logs be processed through the callback function.
 *
 * @param[in] context The parameter can be used by the user to send in an
 * additional variable or structure that might be needed to process the logs.
 * @param[in] level The parameter holds the log level of the current enclave
 * log being processed and can be used by the callback.
 * @param[in] thread_id The parameter holds the thread id (the base address
 * of thread data) of the current processing thread.
 * @param[in] message The parameter holds the enclave log message generated.
 */
typedef void (*oe_enclave_log_callback_t)(
    void* context,
    oe_log_level_t level,
    uint64_t thread_id,
    const char* message);

/**
 * Set callback that will process logs generated by the enclave.
 *
 * This function, when called ensures the enclave logs are transferred to
 * the preferred callback instead of the regular route.
 *
 * @param[in] context A pointer to a variable or structure that can be used
 * to process the logs inside the callback function.
 * @param[in] callback Pointer to a function that is be assigned
 * as the callback to process enclave logs.
 *
 * @retval OE_OK Callback was added successfully.
 * @retval OE_FAILURE Failed to add callback.
 */
oe_result_t oe_enclave_log_set_callback(
    void* context,
    oe_enclave_log_callback_t callback);

OE_EXTERNC_END

#endif
